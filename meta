#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
.. module:: dump_dxfile.py
   :platform: Unix
   :synopsis: log.infoan hdf5 file Group/Data dataset list.

"""

from __future__ import print_function

import os
import h5py
import sys
import argparse
import dxchange
import dxchange.reader as dxreader

import log
import pathlib
from datetime import datetime



def read_dx_meta(file_name) :
    meta = {}
    
    fp = h5py.File(file_name, 'r') 
    read_hdf5_item_structure(meta, fp, file_name)
    fp.close()

    return meta


def read_hdf5_item_structure(meta, fp, file_name, offset='    ') :
    """log.infos the input file/group/dataset(fp) name and begin iterations on its content"""

    if isinstance(fp, h5py.Dataset):
        if ('/process/' in fp.name) or  ('/measurement/sample/' in fp.name):
            s = fp.name.split('/')
            name = s[-1].replace('-', '_')
            value = dxreader.read_hdf5(file_name,  fp.name)[0].decode(encoding="utf-8")
            meta.update( {name : value} )
    elif isinstance(fp, h5py.Group):
        log.info('Group: %s' % fp.name)
 
    else :
        log.info('WARNING: UNKNOWN ITEM IN HDF5 FILE', fp.name)
        sys.exit( "EXECUTION IS TERMINATED" )
 
    if isinstance(fp, h5py.File) or isinstance(fp, h5py.Group) :
        # for key,val in dict(fp).iteritems() :
        for key,val in dict(fp).items() :
            subg = val
            #log.info(offset, key )#,"   ", subfp.name #, val, subfp.len(), type(subg),
            read_hdf5_item_structure(meta, subg, file_name, offset + '    ')
 

def main(arg):

    parser = argparse.ArgumentParser()
    parser.add_argument("fname", help="DataExchange file: /data/sample.h5")

    args = parser.parse_args()

    # Set path to the micro-CT data to reconstruct.
    fname = args.fname

    # create logger
    logs_home = os.path.join(str(pathlib.Path.home()), 'logs')

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = os.path.join(logs_home, 'tomopy_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H_%M_%S") + '.log')
 
    log.setup_custom_logger(lfname)
    log.info("Saving log at %s" % lfname)

    if os.path.isfile(fname): 
        meta = read_dx_meta(fname)    
        log.info(meta)
    else:
        log.info("File Name does not exist: ", fname)

if __name__ == "__main__":
    main(sys.argv[1:])
